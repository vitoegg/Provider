name: Update Rules

on:
  schedule:
    - cron: '0 */3 * * *'  # 每3小时执行一次
  workflow_dispatch:

jobs:
  update-rules:
    runs-on: ubuntu-latest
    outputs:
      has_changes: ${{ steps.check_changes.outputs.has_changes }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Timezone
        run: sudo timedatectl set-timezone "Asia/Shanghai"

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Update RuleSets
        id: update_rules
        run: |
          # 定义规则配置：规则名称 => [输出路径, URL数组]
          declare -A rule_configs=(
            ["China"]="RuleSet/Direct/China.list;https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Surge/ChinaMax/ChinaMax_Domain.list https://raw.githubusercontent.com/Loyalsoldier/surge-rules/release/direct.txt https://raw.githubusercontent.com/vitoegg/Provider/master/RuleSet/Direct/LocalNet.list"
            ["ChinaClash"]="RuleSet/Direct/China.yaml;https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/ChinaMax/ChinaMax_Domain.yaml https://raw.githubusercontent.com/Loyalsoldier/clash-rules/release/direct.txt https://raw.githubusercontent.com/vitoegg/Provider/master/RuleSet/Direct/LocalNet.yaml https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Apple/Apple_Domain.yaml https://raw.githubusercontent.com/Loyalsoldier/clash-rules/release/apple.txt https://raw.githubusercontent.com/Loyalsoldier/clash-rules/release/icloud.txt"
            ["Apple"]="RuleSet/Apple/Service.list;https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Surge/Apple/Apple_Domain.list https://raw.githubusercontent.com/Loyalsoldier/surge-rules/release/apple.txt https://raw.githubusercontent.com/Loyalsoldier/surge-rules/release/icloud.txt"
            ["Reject"]="RuleSet/Extra/Reject.txt;https://ruleset.skk.moe/Clash/domainset/reject.txt https://ruleset.skk.moe/Clash/domainset/reject_extra.txt https://raw.githubusercontent.com/vitoegg/Provider/master/RuleSet/Extra/Privacy.txt"
          )
          
          for rule in "${!rule_configs[@]}"; do
            IFS=';' read -r output_path urls <<< "${rule_configs[$rule]}"
            echo "Updating $rule rules to $output_path..."
            
            # 创建临时文件数组
            temp_files=()
            for url in $urls; do
              temp_file=$(mktemp)
              echo "Downloading from $url..."
              curl -s "$url" > "$temp_file"
              temp_files+=("$temp_file")
            done
            
            # 合并并处理文件
            merged_file=$(mktemp)
            
            # 根据文件扩展名决定不同的处理方式
            if [[ "$output_path" == *.yaml ]]; then
              # YAML文件处理
              echo "Processing YAML file..."
              {
                echo "payload:"
                cat "${temp_files[@]}" | 
                  grep -v "^#" |                # 移除以#开头的注释行
                  grep -v "^ *#" |              # 移除以空格+#开头的注释行
                  sed 's/[[:space:]]*#.*$//' |  # 移除行尾注释
                  sed 's/^[[:space:]]*//g' |    # 移除行首空格
                  sed 's/[[:space:]]*$//g' |    # 移除行尾空格
                  grep -v "^$" |                # 移除空行
                  grep -v "^payload:" |         # 移除原有的payload行
                  sort | uniq
              } > "$merged_file"
            else
              # 普通列表文件处理
              cat "${temp_files[@]}" | grep -v "^#" | grep -v "^$" | sort | uniq > "$merged_file"
            fi
            
            # 确保输出目录存在
            mkdir -p "$(dirname "$output_path")"
            
            # 为了比较，创建一个不包含时间戳的临时文件
            temp_new_content=$(mktemp)
            {
              echo "# Merged from:"
              for url in $urls; do
                repo_url=$(echo "$url" | sed -E 's|raw.githubusercontent.com/([^/]+/[^/]+).*|github.com/\1|')
                echo "# - https://$repo_url"
              done
              echo ""
              cat "$merged_file"
            } > "$temp_new_content"
            
            # 如果原文件存在，创建一个不包含时间戳的版本用于比较
            temp_old_content=$(mktemp)
            if [ -f "$output_path" ]; then
              cat "$output_path" | grep -v "^# Update time:" > "$temp_old_content"
            else
              touch "$temp_old_content"
            fi
            
            # 比较文件内容（忽略时间戳）
            if ! cmp -s "$temp_old_content" "$temp_new_content"; then
              # 如果内容有实质性变化，则写入新文件（包含新的时间戳）
              {
                echo "# Update time: $(date '+%Y-%m-%d %H:%M:%S')"
                cat "$temp_new_content"
              } > "$output_path"
              echo "Changes detected in $rule rules."
            else
              echo "No changes detected in $rule rules."
            fi
            
            # 清理临时文件
            rm "${temp_files[@]}" "$merged_file" "$temp_new_content" "$temp_old_content"
          done

      - name: Check for changes
        id: check_changes
        run: |
          # 对每个文件进行实质性变更检查
          declare -a files=("RuleSet/Direct/China.list" "RuleSet/Direct/China.yaml" "RuleSet/Apple/Service.list" "RuleSet/Extra/Reject.txt")
          changes_detected=false
          
          git add "${files[@]}"
          
          for file in "${files[@]}"; do
            # 获取git diff，排除时间戳行
            if git diff --cached --no-color "$file" | grep -v '^[+-]# Update time:' | grep -q '^[+-]'; then
              changes_detected=true
              break
            fi
          done
          
          if [ "$changes_detected" = true ]; then
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "Changes detected in rules files"
          else
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "No changes detected in rules files"
            git restore --staged "${files[@]}"
          fi

      - name: Commit and push changes
        if: steps.check_changes.outputs.has_changes == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git commit -m "Auto update rules by action bot"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GIT_USER_TOKEN }}

      - name: Delete workflows runs
        uses: ophub/delete-releases-workflows@main
        with:
          delete_releases: false
          releases_keep_latest: 0
          delete_workflows: true
          workflows_keep_day: 0
          gh_token: ${{ secrets.GIT_USER_TOKEN }}
