name: Update Rules

on:
  schedule:
    - cron: '0 */12 * * *'  # 每12小时执行一次
  workflow_dispatch:

jobs:
  update-rules:
    runs-on: ubuntu-latest
    outputs:
      has_changes: ${{ steps.check_changes.outputs.has_changes }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Timezone
        run: sudo timedatectl set-timezone "Asia/Shanghai"

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Update RuleSets
        id: update_rules
        run: |
          # 定义规则配置：规则名称 => [输出路径, URL数组]
          declare -A rule_configs=(
            ["China"]="RuleSet/Direct/China.list;https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Surge/ChinaMax/ChinaMax_Domain.list https://raw.githubusercontent.com/Loyalsoldier/surge-rules/release/direct.txt"
            ["Apple"]="RuleSet/Apple/Service.list;https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Surge/Apple/Apple_Domain.list https://raw.githubusercontent.com/Loyalsoldier/surge-rules/release/apple.txt https://raw.githubusercontent.com/Loyalsoldier/surge-rules/release/icloud.txt"
          )
          
          for rule in "${!rule_configs[@]}"; do
            IFS=';' read -r output_path urls <<< "${rule_configs[$rule]}"
            echo "Updating $rule rules to $output_path..."
            
            # 保存原文件的备份（如果存在）
            if [ -f "$output_path" ]; then
              cp "$output_path" "${output_path}.bak"
            fi
            
            # 创建临时文件数组
            temp_files=()
            for url in $urls; do
              temp_file=$(mktemp)
              echo "Downloading from $url..."
              curl -s "$url" > "$temp_file"
              temp_files+=("$temp_file")
            done
            
            # 合并并处理文件
            merged_file=$(mktemp)
            cat "${temp_files[@]}" | grep -v "^#" | grep -v "^$" | sort | uniq > "$merged_file"
            
            # 确保输出目录存在
            mkdir -p "$(dirname "$output_path")"
            
            # 写入最终文件
            {
              echo "# Update time: $(date '+%Y-%m-%d %H:%M:%S')"
              echo "# Merged from:"
              for url in $urls; do
                repo_url=$(echo "$url" | sed -E 's|raw.githubusercontent.com/([^/]+/[^/]+).*|github.com/\1|')
                echo "# - https://$repo_url"
              done
              echo ""
              cat "$merged_file"
            } > "$output_path"
            
            # 清理临时文件
            rm "${temp_files[@]}" "$merged_file"
            echo "$rule rules have been updated."
          done

      - name: Check for changes
        id: check_changes
        run: |
          git add RuleSet/Direct/China.list RuleSet/Apple/Service.list
          
          if git diff --staged | grep -v "Update time:" | grep -q '^[+-]'; then
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "Changes detected in rules files"
          else
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "No changes detected in rules files"
            # 如果没有变化，恢复原始文件（避免更新时间戳）
            for file in RuleSet/Direct/China.list RuleSet/Apple/Service.list; do
              if [ -f "${file}.bak" ]; then
                mv "${file}.bak" "$file"
              fi
            done
            git reset HEAD RuleSet/Direct/China.list RuleSet/Apple/Service.list
          fi
          
          # 清理备份文件
          rm -f RuleSet/Direct/China.list.bak RuleSet/Apple/Service.list.bak

      - name: Commit and push changes
        if: steps.check_changes.outputs.has_changes == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git commit -m "Auto update rules by action bot"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GIT_USER_TOKEN }}

      - name: Delete workflows runs
        uses: ophub/delete-releases-workflows@main
        with:
          delete_releases: false
          releases_keep_latest: 0
          delete_workflows: true
          workflows_keep_day: 0
          gh_token: ${{ secrets.GIT_USER_TOKEN }}
